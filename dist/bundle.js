!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i={_x:1,_y:0,create:function(t,e){var n=Object.create(this);return n.setX(t),n.setY(e),n},setX:function(t){this._x=t},getX:function(){return this._x},setY:function(t){this._y=t},getY:function(){return this._y},setAngle:function(t){var e=this.getLength();this._x=Math.cos(t)*e,this._y=Math.sin(t)*e},setFromAngle:function(t){this._x=Math.cos(t),this._y=Math.sin(t)},getAngle:function(){return Math.atan2(this._y,this._x)},setLength:function(t){var e=this.getAngle();this._x=Math.cos(e)*t,this._y=Math.sin(e)*t},getLength:function(){return Math.sqrt(this._x*this._x+this._y*this._y)},add:function(t){return i.create(this._x+t.getX(),this._y+t.getY())},subtract:function(t){return i.create(this._x-t.getX(),this._y-t.getY())},multiply:function(t){return i.create(this._x*t,this._y*t)},divide:function(t){return i.create(this._x/t,this._y/t)},addTo:function(t){this._x+=t.getX(),this._y+=t.getY()},addFromScalar:function(t,e){this._x+=t,this._y+=e},subtractFrom:function(t){this._x-=t.getX(),this._y-=t.getY()},multiplyBy:function(t){this._x*=t,this._y*=t},divideBy:function(t){this._x/=t,this._y/=t}};function r(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}window.onload=function(){for(var t=document.getElementById("canvas"),e=t.getContext("2d"),n=t.width=window.innerWidth,o=t.height=window.innerHeight,s=[],u=function(){function t(e,n,r,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.position=i.create(e,n),this.velocity=i.create(0,0),this.velocity.setFromAngle(o),this.speed=r}var e,n,o;return e=t,(n=[{key:"update",value:function(){this.position.addFromScalar(this.velocity.getX()*this.speed,this.velocity.getY()*this.speed)}}])&&r(e.prototype,n),o&&r(e,o),t}(),a=0;a<100;a++)s.push(new u(t.width/2,t.height/2,Math.random(),Math.random()*Math.PI*2));!function t(){e.clearRect(0,0,n,o);for(var i=0;i<100;i++){var r=s[i];r.update(),e.beginPath(),e.arc(r.position.getX(),r.position.getY(),10,0,2*Math.PI,!1),e.fill()}requestAnimationFrame(t)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,