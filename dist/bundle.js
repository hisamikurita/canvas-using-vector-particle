!function(t){var i={};function n(e){if(i[e])return i[e].exports;var o=i[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=i,n.d=function(t,i,e){n.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,i){if(1&i&&(t=n(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var o in t)n.d(e,o,function(i){return t[i]}.bind(null,o));return e},n.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(i,"a",i),i},n.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},n.p="",n(n.s=0)}([function(t,i,n){"use strict";function e(t,i){for(var n=0;n<i.length;n++){var e=i[n];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}n.r(i);var o=function(){function t(i,n){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.x=i,this.y=n}var i,n,o;return i=t,(n=[{key:"set",value:function(t,i){return this.x=t,this.y=i,this}},{key:"clone",value:function(){return new t(this.x,this.y)}},{key:"add",value:function(t){return this.x+=t.x,this.y+=t.y,this}},{key:"sub",value:function(t){return this.x-=t.x,this.y-=t.y,this}},{key:"mult",value:function(t){return this.x*=t.x,this.y*=t.y,this}},{key:"magnitude",value:function(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"setFromScalarAngle",value:function(t,i){this.x=Math.cos(i)*t,this.y=Math.sin(i)*t}}])&&e(i.prototype,n),o&&e(i,o),t}();function r(t,i){for(var n=0;n<i.length;n++){var e=i[n];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}var a=function(){function t(i,n,e,r,a,s,h){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=i,this.position=new o(n,e),this.velocity=new o,this.velocity.setFromScalarAngle(r,a),this.friction=new o,this.friction.set(.05,.05),this.radius=s,this.color=h}var i,n,e;return i=t,(n=[{key:"update",value:function(){this.position.add(this.velocity),this.position.x+this.radius>this.canvas.width&&(this.position.x=this.canvas.width-this.radius,this.velocity.x*=-1),this.position.x-this.radius<0&&(this.position.x=this.radius,this.velocity.x*=-1),this.position.y+this.radius>this.canvas.height&&(this.position.y=this.canvas.height-this.radius,this.velocity.y*=-1),this.position.y-this.radius<0&&(this.position.y=this.radius,this.velocity.y*=-1),this.position.x>this.canvas.width&&(this.position.x=this.canvas.width/2),this.position.y>this.canvas.height&&(this.position.y=this.canvas.height/2)}},{key:"accelerate",value:function(){this.acceleration=this.velocity.clone(),this.acceleration.mult(this.friction),this.velocity.sub(this.acceleration),this.velocity.magnitude()<=1&&this.velocity.setFromScalarAngle(10*Math.random()+2,Math.random()*Math.PI*2)}}])&&r(i.prototype,n),e&&r(i,e),t}();window.onload=function(){var t,i,n=document.getElementById("canvas"),e=n.getContext("2d"),o=n.width=window.innerWidth,r=n.height=window.innerHeight,s=[],h=["#eeb900","#6DD0A5","#f799db"];function u(t){return t[Math.floor(Math.random()*t.length)]}window.onresize=function(){o=n.width=window.innerWidth,r=n.height=window.innerHeight};for(var c=0;c<100;c++)s.push(new a(n,Math.random()*n.width,Math.random()*n.height,10*Math.random()+2,Math.random()*Math.PI*2,(t=2,i=24,Math.floor(Math.random()*(i-t+1)+t)),u(h)));!function t(){e.clearRect(0,0,o,r);for(var i=0;i<100;i++){var n=s[i];n.accelerate(),n.update(),e.beginPath(),e.arc(n.position.x,n.position.y,n.radius,0,2*Math.PI,!1),e.fillStyle=n.color,e.fill()}requestAnimationFrame(t)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,