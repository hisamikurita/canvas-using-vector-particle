!function(t){var i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=i,e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var o in t)e.d(n,o,function(i){return t[i]}.bind(null,o));return n},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";function n(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}e.r(i);var o=function(){function t(i,e){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.x=i,this.y=e}var i,e,o;return i=t,(e=[{key:"set",value:function(t,i){return this.x=t,this.y=i,this}},{key:"clone",value:function(){return new t(this.x,this.y)}},{key:"add",value:function(t){return this.x+=t.x,this.y+=t.y,this}},{key:"sub",value:function(t){return this.x-=t.x,this.y-=t.y,this}},{key:"mult",value:function(t){return this.x*=t.x,this.y*=t.y,this}},{key:"magnitude",value:function(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"setFromScalarAngle",value:function(t,i){this.x=Math.cos(i)*t,this.y=Math.sin(i)*t}}])&&n(i.prototype,e),o&&n(i,o),t}();function r(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var a=function(){function t(i,e,n,r,a,s,h){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=i,this.position=new o(e,n),this.velocity=new o,this.velocity.setFromScalarAngle(r,a),this.friction=new o,this.friction.set(.05,.05),this.radius=s,this.color=h}var i,e,n;return i=t,(e=[{key:"update",value:function(){this.position.add(this.velocity),this.position.x+this.radius>this.canvas.width&&(this.position.x=this.canvas.width-this.radius,this.velocity.x*=-1),this.position.x-this.radius<0&&(this.position.x=this.radius,this.velocity.x*=-1),this.position.y+this.radius>this.canvas.height&&(this.position.y=this.canvas.height-this.radius,this.velocity.y*=-1),this.position.y-this.radius<0&&(this.position.y=this.radius,this.velocity.y*=-1),this.position.x>this.canvas.width&&(this.position.x=this.canvas.width/2),this.position.y>this.canvas.height&&(this.position.y=this.canvas.height/2)}},{key:"accelerate",value:function(){this.acceleration=this.velocity.clone(),this.acceleration.mult(this.friction),this.velocity.sub(this.acceleration),this.velocity.magnitude()<=1&&(this.decelerationforce=new o,this.decelerationforce.setFromScalarAngle(10*Math.random()+2,Math.random()*Math.PI*2),this.velocity.add(this.decelerationforce))}}])&&r(i.prototype,e),n&&r(i,n),t}();window.onload=function(){var t,i,e=document.getElementById("canvas"),n=e.getContext("2d"),o=e.width=window.innerWidth,r=e.height=window.innerHeight,s=[],h=["#eeb900","#6DD0A5","#f799db"];function c(t){return t[Math.floor(Math.random()*t.length)]}window.onresize=function(){o=e.width=window.innerWidth,r=e.height=window.innerHeight};for(var u=0;u<100;u++)s.push(new a(e,Math.random()*e.width,Math.random()*e.height,10*Math.random()+2,Math.random()*Math.PI*2,(t=2,i=24,Math.floor(Math.random()*(i-t+1)+t)),c(h)));!function t(){n.clearRect(0,0,o,r);for(var i=0;i<100;i++){var e=s[i];e.accelerate(),e.update(),n.beginPath(),n.arc(e.position.x,e.position.y,e.radius,0,2*Math.PI,!1),n.fillStyle=e.color,n.fill()}requestAnimationFrame(t)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,