!function(t){var i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=i,e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var o in t)e.d(n,o,function(i){return t[i]}.bind(null,o));return n},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";function n(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}e.r(i);var o=function(){function t(i,e){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.x=i,this.y=e}var i,e,o;return i=t,(e=[{key:"set",value:function(t,i){return this.x=t,this.y=i,this}},{key:"clone",value:function(){return new t(this.x,this.y)}},{key:"add",value:function(t){return this.x+=t.x,this.y+=t.y,this}},{key:"sub",value:function(t){return this.x-=t.x,this.y-=t.y,this}},{key:"setFromAngle",value:function(t){this.x=Math.cos(t),this.y=Math.sin(t)}},{key:"addFromScalar",value:function(t,i){this.x+=t,this.y+=i}}])&&n(i.prototype,e),o&&n(i,o),t}();function r(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=function(){function t(i,e,n,r,s,a,h){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=i,this.position=new o(e,n),this.velocity=new o(0,0),this.velocity.setFromAngle(s),this.speed=r,this.radius=a,this.color=h,this.friction=.01}var i,e,n;return i=t,(e=[{key:"update",value:function(){this.position.addFromScalar(this.velocity.x*this.speed,this.velocity.y*this.speed),this.velocity.x=this.velocity.x-this.velocity.x*this.friction,this.velocity.y=this.velocity.y-this.velocity.y*this.friction,(this.position.x+this.radius>this.canvas.width||this.position.x-this.radius<0)&&(this.velocity.x*=-1),(this.position.y+this.radius>this.canvas.height||this.position.y-this.radius<0)&&(this.velocity.y*=-1),this.position.x>this.canvas.width&&(this.position.x=this.canvas.width/2),this.position.y>this.canvas.height&&(this.position.y=this.canvas.height/2)}}])&&r(i.prototype,e),n&&r(i,n),t}();window.onload=function(){var t,i,e=document.getElementById("canvas"),n=e.getContext("2d"),o=e.width=window.innerWidth,r=e.height=window.innerHeight,a=[],h=["#eeb900","#6DD0A5","#f799db"];function u(t){return t[Math.floor(Math.random()*t.length)]}window.onresize=function(){o=e.width=window.innerWidth,r=e.height=window.innerHeight};for(var c=0;c<100;c++)a.push(new s(e,e.width/2,e.height/2,Math.random()+8,Math.random()*Math.PI*2,(t=2,i=24,Math.floor(Math.random()*(i-t+1)+t)),u(h)));!function t(){n.clearRect(0,0,o,r);for(var i=0;i<100;i++){var e=a[i];e.update(),n.beginPath(),n.arc(e.position.x,e.position.y,e.radius,0,2*Math.PI,!1),n.fillStyle=e.color,n.fill()}requestAnimationFrame(t)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,